# test_gpu_expansion.py
"""
üß† Teste da Expans√£o GPU do AEONCOSMA
Demonstra as novas capacidades GPU e IA embarcada
Desenvolvido por Luiz Cruz - 2025
"""

import time
import sys
import os

# Adiciona path para importa√ß√µes
sys.path.append(os.path.join(os.path.dirname(__file__), 'aeoncosma'))

def test_gpu_components():
    """Testa componentes GPU individualmente"""
    print("üß† AEONCOSMA GPU EXPANSION TEST")
    print("=" * 50)
    
    # Teste 1: NodeBrain
    print("\nüß† Teste 1: Node Brain (IA Neural)")
    try:
        from aeoncosma.gpu.node_brain import test_node_brain
        brain = test_node_brain()
        print("‚úÖ NodeBrain testado com sucesso")
    except Exception as e:
        print(f"‚ö†Ô∏è NodeBrain erro: {e}")
    
    # Teste 2: GPU Utils
    print("\nüõ†Ô∏è Teste 2: GPU Utilities")
    try:
        from aeoncosma.gpu.gpu_utils import test_gpu_utils
        test_gpu_utils()
        print("‚úÖ GPU Utils testado com sucesso")
    except Exception as e:
        print(f"‚ö†Ô∏è GPU Utils erro: {e}")
    
    # Teste 3: P2P Node com GPU Enhancement
    print("\nüåê Teste 3: P2P Node GPU Enhanced")
    try:
        from aeoncosma.networking.p2p_node import P2PNode
        
        # Cria n√≥ com GPU enhancement
        node = P2PNode(
            host="127.0.0.1",
            port=9001,
            node_id="test_gpu_node"
        )
        
        # Inicia n√≥
        node.start()
        print("‚úÖ P2P Node GPU Enhanced iniciado")
        
        # Testa informa√ß√µes
        info = node.get_network_info()
        print(f"üìä GPU Enhanced: {info.get('gpu_enhanced', False)}")
        
        time.sleep(2)
        node.stop()
        print("‚úÖ P2P Node parado")
        
    except Exception as e:
        print(f"‚ö†Ô∏è P2P Node GPU erro: {e}")

def test_gpu_simulator():
    """Testa simulador massivo"""
    print("\nüéÆ Teste 4: GPU Massive Simulator")
    try:
        from aeoncosma.gpu.gpu_simulator import MassiveP2PSimulator
        
        # Simula√ß√£o pequena para teste
        simulator = MassiveP2PSimulator(num_nodes=1000, gpu_id=0)
        
        # Inicializa rede
        init_result = simulator.initialize_network()
        print(f"‚úÖ Rede inicializada: {init_result}")
        
        # Simula√ß√£o de descoberta
        discovery = simulator.simulate_peer_discovery(discovery_rounds=3)
        print(f"‚úÖ Discovery simulado: {len(discovery)} rounds")
        
        # Consenso com IA
        consensus = simulator.simulate_ai_consensus(consensus_rounds=2)
        print(f"‚úÖ Consenso simulado: {len(consensus)} rounds")
        
        # Estat√≠sticas finais
        stats = simulator.get_final_statistics()
        print(f"üìä Estat√≠sticas: {stats}")
        
        print("‚úÖ GPU Simulator testado com sucesso")
        
    except Exception as e:
        print(f"‚ö†Ô∏è GPU Simulator erro: {e}")

def test_art_generator():
    """Testa gerador de arte da rede"""
    print("\nüé® Teste 5: Network Art Generator")
    try:
        from aeoncosma.gpu.stable_diffusion_visualizer import test_network_art_generator
        
        generator = test_network_art_generator()
        print("‚úÖ Art Generator testado com sucesso")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Art Generator erro: {e}")

def test_ecosystem_launcher():
    """Testa launcher do ecosystem"""
    print("\nüöÄ Teste 6: Ecosystem Launcher")
    try:
        from aeoncosma.gpu.launch_gpu_ecosystem import GPUEcosystemLauncher
        
        # Cria launcher
        launcher = GPUEcosystemLauncher()
        
        # Verifica GPU
        gpu_info = launcher.check_gpu_availability()
        print(f"üéÆ GPU Info: {gpu_info}")
        
        # Testa configura√ß√£o
        print(f"üîß Configura√ß√£o: {launcher.config}")
        
        print("‚úÖ Ecosystem Launcher testado com sucesso")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Ecosystem Launcher erro: {e}")

def demonstration_mode():
    """Modo demonstra√ß√£o com ecosystem m√≠nimo"""
    print("\nüåü MODO DEMONSTRA√á√ÉO - Ecosystem M√≠nimo")
    print("=" * 50)
    
    try:
        from aeoncosma.gpu.launch_gpu_ecosystem import GPUEcosystemLauncher
        
        # Cria launcher com configura√ß√£o m√≠nima
        launcher = GPUEcosystemLauncher()
        
        # Configura para demonstra√ß√£o
        launcher.config["simulation"]["max_nodes"] = 5000
        launcher.config["art_generation"]["enabled"] = False  # Desabilitado para demo
        
        print("üöÄ Iniciando ecosystem de demonstra√ß√£o...")
        
        # Lan√ßa alguns n√≥s
        launcher.running = True
        launcher.global_stats["start_time"] = time.time()
        
        # Lan√ßa 3 n√≥s para demonstra√ß√£o
        launcher.launch_gpu_nodes(num_nodes=3, start_port=9100)
        
        # Executa por 30 segundos
        print("üïê Executando por 30 segundos...")
        for i in range(30):
            time.sleep(1)
            if i % 10 == 0:
                print(f"   ‚è±Ô∏è {30-i} segundos restantes...")
        
        # Para ecosystem
        launcher.shutdown_ecosystem()
        
        print("‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o: {e}")

def main():
    """Execu√ß√£o principal dos testes"""
    import argparse
    
    parser = argparse.ArgumentParser(description='AEONCOSMA GPU Expansion Test')
    parser.add_argument('--components', action='store_true', help='Testa componentes individuais')
    parser.add_argument('--simulator', action='store_true', help='Testa simulador massivo')
    parser.add_argument('--art', action='store_true', help='Testa gerador de arte')
    parser.add_argument('--launcher', action='store_true', help='Testa ecosystem launcher')
    parser.add_argument('--demo', action='store_true', help='Modo demonstra√ß√£o')
    parser.add_argument('--all', action='store_true', help='Executa todos os testes')
    
    args = parser.parse_args()
    
    if args.all or not any([args.components, args.simulator, args.art, args.launcher, args.demo]):
        # Executa todos os testes se nenhum espec√≠fico for escolhido
        test_gpu_components()
        test_gpu_simulator()
        test_art_generator()
        test_ecosystem_launcher()
        demonstration_mode()
    else:
        if args.components:
            test_gpu_components()
        
        if args.simulator:
            test_gpu_simulator()
        
        if args.art:
            test_art_generator()
        
        if args.launcher:
            test_ecosystem_launcher()
        
        if args.demo:
            demonstration_mode()
    
    print("\nüéØ EXPANS√ÉO GPU AEONCOSMA - TESTE CONCLU√çDO")
    print("=" * 50)
    print("üåü Sistema pronto para simular 100k+ n√≥s com IA embarcada!")

if __name__ == "__main__":
    main()
