#!/usr/bin/env python3
"""
üîß AEONCOSMA ECOSYSTEM SETUP
Configura√ß√£o Completa do Ambiente de Teste
Desenvolvido por Luiz Cruz - 2025
"""

import subprocess
import sys
import os
import json
from pathlib import Path

def install_package(package):
    """Instala um pacote Python"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        return True
    except subprocess.CalledProcessError:
        return False

def check_python_version():
    """Verifica vers√£o do Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ requerido")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def setup_ecosystem_environment():
    """Configura ambiente completo para teste de ecossistema"""
    print("üîß AEONCOSMA ECOSYSTEM SETUP")
    print("=" * 50)
    
    # Verifica Python
    if not check_python_version():
        return False
    
    print("\nüì¶ Instalando depend√™ncias...")
    
    # Depend√™ncias essenciais
    packages = [
        "psutil",           # Monitoramento de sistema
        "prometheus_client", # M√©tricas Prometheus
        "requests",         # HTTP requests
        "websockets",       # WebSocket support
        "aiohttp",          # Async HTTP
        "asyncio",          # Async support
        "numpy",            # Computa√ß√£o num√©rica
        "pandas",           # An√°lise de dados
    ]
    
    failed_packages = []
    for package in packages:
        print(f"   üì• Instalando {package}...")
        if install_package(package):
            print(f"   ‚úÖ {package} instalado")
        else:
            print(f"   ‚ùå Falha ao instalar {package}")
            failed_packages.append(package)
    
    if failed_packages:
        print(f"\n‚ö†Ô∏è Pacotes n√£o instalados: {', '.join(failed_packages)}")
        print("üí° Execute manualmente: pip install " + " ".join(failed_packages))
    
    # Cria estrutura de diret√≥rios
    print("\nüìÅ Criando estrutura de diret√≥rios...")
    
    directories = [
        "logs",
        "metrics", 
        "reports",
        "data/ecosystem",
        "data/monitoring",
        "config"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"   ‚úÖ {directory}/")
    
    # Cria arquivos de configura√ß√£o
    print("\n‚öôÔ∏è Criando arquivos de configura√ß√£o...")
    
    # Configura√ß√£o do Prometheus
    prometheus_config = """
# AEONCOSMA Prometheus Configuration
global:
  scrape_interval: 5s
  evaluation_interval: 5s

scrape_configs:
  - job_name: 'aeoncosma-ecosystem'
    static_configs:
      - targets: ['localhost:8001']
    scrape_interval: 2s
    metrics_path: /metrics

  - job_name: 'system-metrics'
    static_configs:
      - targets: ['localhost:8002']
    scrape_interval: 5s
"""
    
    with open("config/prometheus.yml", "w") as f:
        f.write(prometheus_config)
    print("   ‚úÖ config/prometheus.yml")
    
    # Configura√ß√£o do teste de ecossistema
    ecosystem_config = {
        "test_settings": {
            "max_nodes": 1000,
            "base_port": 20000,
            "monitoring_port": 8001,
            "test_duration_seconds": 1800,
            "phases": {
                "bootstrap": 10,
                "early_network": 50,
                "growth_phase": 200,
                "mature_network": 500,
                "stress_test": 1000
            }
        },
        "monitoring": {
            "prometheus_enabled": True,
            "real_time_dashboard": True,
            "log_level": "INFO",
            "metrics_retention_hours": 24
        },
        "network_settings": {
            "connection_timeout": 3,
            "max_connections_per_node": 8,
            "peer_discovery_interval": 10,
            "consensus_threshold": 0.51
        },
        "business_metrics": {
            "target_arr_usd": 5000000,
            "scalability_threshold": 500,
            "commercial_validation_nodes": 100
        }
    }
    
    with open("config/ecosystem_config.json", "w") as f:
        json.dump(ecosystem_config, f, indent=2)
    print("   ‚úÖ config/ecosystem_config.json")
    
    # Script de inicializa√ß√£o r√°pida
    quick_start_script = """@echo off
echo üöÄ AEONCOSMA ECOSYSTEM QUICK START
echo ================================

echo üìä Iniciando monitoramento em tempo real...
start python realtime_monitoring.py

timeout /t 3 /nobreak >nul

echo üåê Iniciando teste de valida√ß√£o do ecossistema...
python ecosystem_validation_test.py

echo ‚úÖ Teste conclu√≠do!
pause
"""
    
    with open("start_ecosystem_test.bat", "w") as f:
        f.write(quick_start_script)
    print("   ‚úÖ start_ecosystem_test.bat")
    
    # README para o teste
    readme_content = """# üåü AEONCOSMA ECOSYSTEM VALIDATION

## Vis√£o Geral
Este √© o teste definitivo de escalabilidade do AEONCOSMA - uma simula√ß√£o completa de ecossistema de mercado descentralizado com at√© 1000 n√≥s P2P.

## Objetivo
Validar a tese central de que o AEONCOSMA pode operar como uma arquitetura verdadeiramente escal√°vel e descentralizada, transformando alega√ß√µes em fatos audit√°veis.

## Componentes do Teste

### 1. ecosystem_validation_test.py
- **Prop√≥sito**: Teste principal de valida√ß√£o do ecossistema
- **Capacidade**: At√© 1000 n√≥s simult√¢neos
- **Dura√ß√£o**: 30 minutos de teste cont√≠nuo
- **M√©tricas**: Escalabilidade, performance, consenso, trading

### 2. realtime_monitoring.py  
- **Prop√≥sito**: Monitoramento em tempo real com Prometheus
- **Dashboard**: Terminal interativo + m√©tricas web
- **M√©tricas**: Sistema, rede, neg√≥cio, performance
- **Port**: http://localhost:8001/metrics

## Execu√ß√£o R√°pida

### Op√ß√£o 1: Script Autom√°tico
```cmd
start_ecosystem_test.bat
```

### Op√ß√£o 2: Manual
```cmd
# Terminal 1 - Monitoramento
python realtime_monitoring.py

# Terminal 2 - Teste de Ecossistema  
python ecosystem_validation_test.py
```

## M√©tricas Cr√≠ticas a Observar

### üìä Escalabilidade
- M√°ximo de n√≥s simult√¢neos alcan√ßado
- Taxa de sucesso de conex√µes P2P
- Tempo de propaga√ß√£o de mensagens
- Estabilidade da rede sob carga

### üíª Performance  
- Uso de CPU e mem√≥ria por n√≥
- Lat√™ncia de rede P2P
- Throughput de transa√ß√µes
- Tempo de consenso

### üí∞ Valor Comercial
- ARR estimado baseado na escala
- Score de escalabilidade (0-100)
- Valida√ß√£o de deployment enterprise
- M√©tricas audit√°veis para investidores

## Crit√©rios de Sucesso

### ü•á EXCELENTE (500+ n√≥s)
- Arquitetura altamente escal√°vel validada
- Pronto para deployment global
- $5M+ ARR potencial comprovado
- **TESE DE ESCALABILIDADE COMPROVADA**

### ü•à MUITO BOM (200+ n√≥s)  
- Escal√°vel para m√©dias empresas
- Adequado para redes regionais
- $2M+ ARR potencial

### ü•â BOM (100+ n√≥s)
- Adequado para empresas
- Proof of concept validado
- $1M+ ARR potencial

## Arquivos Gerados

### Logs e Relat√≥rios
- `ecosystem_test.log` - Log detalhado do teste
- `ecosystem_validation_report.txt` - Relat√≥rio final
- `ecosystem_metrics.csv` - Dados CSV para an√°lise
- `realtime_monitoring.log` - Log do monitoramento

### M√©tricas
- `logs/` - Logs detalhados por componente
- `metrics/` - Dados de m√©tricas coletadas  
- `reports/` - Relat√≥rios gerados

## Impacto Comercial

Um teste bem-sucedido transforma o projeto de "promessa tecnol√≥gica" para "solu√ß√£o comprovada em escala", com impacto direto em:

- **Valida√ß√£o T√©cnica**: Prova inquestion√°vel da arquitetura
- **Valor Comercial**: ARR defens√°vel baseado em m√©tricas
- **Atra√ß√£o de Investimento**: Dados audit√°veis para VCs
- **Vantagem Competitiva**: Diferencial t√©cnico massivo

## Desenvolvido por Luiz Cruz - 2025
Sistema Propriet√°rio - Todos os Direitos Reservados
"""
    
    with open("ECOSYSTEM_TEST_README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    print("   ‚úÖ ECOSYSTEM_TEST_README.md")
    
    print("\nüéØ Setup conclu√≠do com sucesso!")
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("   1. Execute: start_ecosystem_test.bat")
    print("   2. Ou manualmente:")
    print("      - Terminal 1: python realtime_monitoring.py")
    print("      - Terminal 2: python ecosystem_validation_test.py")
    print("   3. Monitore: http://localhost:8001/metrics")
    print("   4. Aguarde relat√≥rios finais")
    
    print(f"\nüåü PRONTO PARA VALIDAR A TESE DE ESCALABILIDADE!")
    print("   Este teste pode transformar AEONCOSMA de promessa em realidade comprovada.")
    
    return True

if __name__ == "__main__":
    setup_ecosystem_environment()
