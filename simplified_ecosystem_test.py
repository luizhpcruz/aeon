#!/usr/bin/env python3
"""
üöÄ AEONCOSMA SIMPLIFIED ECOSYSTEM TEST
Teste Simplificado de Valida√ß√£o da Arquitetura P2P
Usando apenas bibliotecas padr√£o do Python
Desenvolvido por Luiz Cruz - 2025
"""

import sys
import os
import time
import threading
import socket
import json
import random
import logging
import signal
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import statistics
import csv

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('simplified_ecosystem_test.log'),
        logging.StreamHandler()
    ]
)

# Configura√ß√£o do teste simplificado
SIMPLE_CONFIG = {
    "max_nodes": 100,  # Reduzido para evitar problemas de recursos
    "phases": {
        "bootstrap": 5,
        "network": 15,
        "scaling": 30,
        "stress": 50,
        "maximum": 100
    },
    "base_port": 30000,
    "test_duration": 300,  # 5 minutos
    "monitoring_interval": 5
}

class SimpleMetrics:
    """Sistema simples de m√©tricas"""
    
    def __init__(self):
        self.data = []
        self.start_time = datetime.now()
        
    def record(self, metric_type: str, value: Any, node_id: str = None):
        """Registra m√©trica"""
        self.data.append({
            "timestamp": datetime.now(),
            "type": metric_type,
            "value": value,
            "node_id": node_id
        })
    
    def get_summary(self):
        """Retorna resumo das m√©tricas"""
        if not self.data:
            return {}
        
        connections = [d for d in self.data if d["type"] == "connection"]
        successes = [d for d in self.data if d["type"] == "success"]
        failures = [d for d in self.data if d["type"] == "failure"]
        
        success_rate = len(successes) / max(1, len(connections)) if connections else 0
        
        return {
            "total_events": len(self.data),
            "connections": len(connections),
            "successes": len(successes),
            "failures": len(failures),
            "success_rate": success_rate,
            "duration": (datetime.now() - self.start_time).total_seconds()
        }

class SimpleNode:
    """N√≥ P2P simplificado para teste"""
    
    def __init__(self, node_id: str, port: int, metrics: SimpleMetrics):
        self.node_id = node_id
        self.port = port
        self.host = "127.0.0.1"
        self.metrics = metrics
        self.running = False
        self.socket = None
        self.peers = {}
        self.message_count = 0
        
    def start(self) -> bool:
        """Inicia o n√≥"""
        try:
            self.running = True
            
            # Socket TCP
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.settimeout(2.0)
            self.socket.bind((self.host, self.port))
            self.socket.listen(5)
            
            # Threads b√°sicas
            threading.Thread(target=self._listen, daemon=True).start()
            threading.Thread(target=self._discover_peers, daemon=True).start()
            
            self.metrics.record("node_started", True, self.node_id)
            return True
            
        except Exception as e:
            logging.error(f"[{self.node_id}] Erro ao iniciar: {e}")
            return False
    
    def _listen(self):
        """Escuta conex√µes"""
        while self.running:
            try:
                conn, addr = self.socket.accept()
                threading.Thread(target=self._handle_connection, args=(conn, addr), daemon=True).start()
            except socket.timeout:
                continue
            except Exception as e:
                if self.running:
                    logging.debug(f"[{self.node_id}] Erro na escuta: {e}")
                break
    
    def _handle_connection(self, conn, addr):
        """Processa conex√£o"""
        try:
            data = conn.recv(1024).decode('utf-8')
            if data:
                message = json.loads(data)
                response = self._process_message(message)
                
                if response:
                    conn.send(json.dumps(response).encode('utf-8'))
                
                self.message_count += 1
                self.metrics.record("message_processed", self.message_count, self.node_id)
        
        except Exception as e:
            self.metrics.record("failure", str(e), self.node_id)
        finally:
            conn.close()
    
    def _process_message(self, message: Dict) -> Dict:
        """Processa mensagem recebida"""
        msg_type = message.get("type", "unknown")
        
        if msg_type == "discovery":
            peer_id = message.get("node_id")
            if peer_id and peer_id != self.node_id:
                self.peers[peer_id] = {
                    "host": message.get("host", "127.0.0.1"),
                    "port": message.get("port"),
                    "timestamp": datetime.now()
                }
                
                self.metrics.record("peer_added", peer_id, self.node_id)
                
                return {
                    "status": "accepted",
                    "node_id": self.node_id,
                    "peer_count": len(self.peers)
                }
        
        return {"status": "processed", "node_id": self.node_id}
    
    def _discover_peers(self):
        """Descobre outros peers"""
        base_port = SIMPLE_CONFIG["base_port"]
        max_port = base_port + SIMPLE_CONFIG["max_nodes"]
        
        while self.running:
            try:
                # Tenta conectar com algumas portas aleat√≥rias
                target_ports = random.sample(
                    [p for p in range(base_port, max_port) if p != self.port], 
                    min(3, max_port - base_port - 1)
                )
                
                for port in target_ports:
                    if not self.running:
                        break
                    
                    self._attempt_connection(port)
                
                time.sleep(5)  # Descoberta a cada 5 segundos
                
            except Exception as e:
                logging.debug(f"[{self.node_id}] Erro na descoberta: {e}")
    
    def _attempt_connection(self, target_port: int):
        """Tenta conectar com outro n√≥"""
        try:
            self.metrics.record("connection", target_port, self.node_id)
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1.0)
            sock.connect((self.host, target_port))
            
            discovery_msg = {
                "type": "discovery",
                "node_id": self.node_id,
                "host": self.host,
                "port": self.port
            }
            
            sock.send(json.dumps(discovery_msg).encode('utf-8'))
            response = sock.recv(512).decode('utf-8')
            
            if response:
                self.metrics.record("success", target_port, self.node_id)
            
        except Exception:
            self.metrics.record("failure", target_port, self.node_id)
        finally:
            try:
                sock.close()
            except:
                pass
    
    def get_status(self) -> Dict:
        """Retorna status do n√≥"""
        return {
            "node_id": self.node_id,
            "port": self.port,
            "running": self.running,
            "peers": len(self.peers),
            "messages": self.message_count
        }
    
    def stop(self):
        """Para o n√≥"""
        self.running = False
        if self.socket:
            try:
                self.socket.close()
            except:
                pass

class SimpleOrchestrator:
    """Orquestrador simplificado do teste"""
    
    def __init__(self):
        self.metrics = SimpleMetrics()
        self.nodes = {}
        self.running = False
        
        # Handler para Ctrl+C
        signal.signal(signal.SIGINT, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """Handler para parada"""
        print("\nüõë Parando teste...")
        self.stop_test()
    
    def run_ecosystem_test(self):
        """Executa teste do ecossistema"""
        print("üöÄ AEONCOSMA SIMPLIFIED ECOSYSTEM TEST")
        print("=" * 60)
        print(f"üéØ M√°ximo de n√≥s: {SIMPLE_CONFIG['max_nodes']}")
        print(f"‚è±Ô∏è Dura√ß√£o: {SIMPLE_CONFIG['test_duration']} segundos")
        print(f"üìç Portas: {SIMPLE_CONFIG['base_port']}+")
        
        self.running = True
        
        # Thread de monitoramento
        threading.Thread(target=self._monitor, daemon=True).start()
        
        try:
            # Executa fases progressivamente
            for phase_name, node_count in SIMPLE_CONFIG["phases"].items():
                if not self.running:
                    break
                
                print(f"\nüèóÔ∏è FASE: {phase_name.upper()} ({node_count} n√≥s)")
                
                # Cria n√≥s incrementalmente
                nodes_to_create = node_count - len(self.nodes)
                if nodes_to_create > 0:
                    created = self._create_nodes(nodes_to_create, phase_name)
                    print(f"‚úÖ Criados {created}/{nodes_to_create} n√≥s")
                
                # Aguarda estabiliza√ß√£o
                print("‚è≥ Aguardando estabiliza√ß√£o...")
                time.sleep(15)
            
            # Executa por tempo determinado
            print(f"\n‚è±Ô∏è Executando teste por {SIMPLE_CONFIG['test_duration']} segundos...")
            start_time = time.time()
            
            while (time.time() - start_time) < SIMPLE_CONFIG['test_duration'] and self.running:
                time.sleep(1)
        
        except Exception as e:
            print(f"‚ùå Erro no teste: {e}")
        
        finally:
            self._finalize_test()
    
    def _create_nodes(self, count: int, phase: str) -> int:
        """Cria n√≥s para uma fase"""
        created = 0
        start_port = SIMPLE_CONFIG["base_port"] + len(self.nodes)
        
        for i in range(count):
            node_id = f"simple_{phase}_{i:02d}"
            port = start_port + i
            
            node = SimpleNode(node_id, port, self.metrics)
            
            if node.start():
                self.nodes[node_id] = node
                created += 1
                
                if created % 5 == 0:
                    print(f"   ‚úÖ {created}/{count} n√≥s criados")
                
                time.sleep(0.1)  # Pausa pequena
            else:
                print(f"   ‚ùå Falha ao criar {node_id}")
        
        return created
    
    def _monitor(self):
        """Monitor do sistema"""
        while self.running:
            try:
                active_nodes = sum(1 for node in self.nodes.values() if node.running)
                total_peers = sum(len(node.peers) for node in self.nodes.values())
                
                summary = self.metrics.get_summary()
                
                print(f"üìä STATUS - N√≥s: {active_nodes}/{len(self.nodes)}, "
                      f"Peers: {total_peers}, "
                      f"Taxa sucesso: {summary.get('success_rate', 0):.2%}")
                
                time.sleep(SIMPLE_CONFIG["monitoring_interval"])
                
            except Exception as e:
                logging.warning(f"Erro no monitor: {e}")
    
    def _finalize_test(self):
        """Finaliza teste"""
        print("\nüèÅ FINALIZANDO TESTE")
        
        # Para todos os n√≥s
        self.stop_test()
        
        # Gera relat√≥rio
        self._generate_report()
    
    def _generate_report(self):
        """Gera relat√≥rio final"""
        print("\nüìä GERANDO RELAT√ìRIO...")
        
        # Coleta dados finais
        active_nodes = sum(1 for node in self.nodes.values() if node.running)
        total_peers = sum(len(node.peers) for node in self.nodes.values())
        summary = self.metrics.get_summary()
        
        # Avalia√ß√£o
        max_nodes = len(self.nodes)
        success_rate = summary.get("success_rate", 0)
        
        if max_nodes >= 80 and success_rate > 0.8:
            grade = "ü•á EXCELENTE"
            value = "$2M+ ARR potencial"
        elif max_nodes >= 50 and success_rate > 0.7:
            grade = "ü•à MUITO BOM"
            value = "$1M+ ARR potencial"
        elif max_nodes >= 20 and success_rate > 0.6:
            grade = "ü•â BOM"
            value = "$500K+ ARR potencial"
        else:
            grade = "üìà B√ÅSICO"
            value = "$100K+ ARR potencial"
        
        report = f"""
üåü RELAT√ìRIO - AEONCOSMA SIMPLIFIED TEST
{'=' * 60}

üéØ RESULTADO: {grade}

üìä M√âTRICAS FINAIS:
   üåê N√≥s criados: {len(self.nodes)}
   ‚úÖ N√≥s ativos: {active_nodes}
   ü§ù Conex√µes P2P: {total_peers}
   üìà Taxa de sucesso: {success_rate:.2%}
   ‚è±Ô∏è Dura√ß√£o: {summary.get('duration', 0):.0f}s

üí∞ VALOR COMERCIAL: {value}

üèÜ VALIDA√á√ÉO:
   ‚úÖ Cria√ß√£o de n√≥s: {'APROVADO' if max_nodes >= 20 else 'B√ÅSICO'}
   ‚úÖ Descoberta P2P: {'APROVADO' if success_rate > 0.7 else 'B√ÅSICO'}
   ‚úÖ Estabilidade: {'APROVADO' if active_nodes/max(1,len(self.nodes)) > 0.8 else 'B√ÅSICO'}

üöÄ CONCLUS√ÉO:
   Sistema demonstrou capacidade de suportar {max_nodes} n√≥s
   com {success_rate:.1%} de taxa de sucesso em descoberta P2P.
   
   {'‚úÖ ARQUITETURA P2P VALIDADA!' if success_rate > 0.7 and max_nodes >= 30 else '‚ö†Ô∏è Requer otimiza√ß√µes para produ√ß√£o'}

{'=' * 60}
Desenvolvido por Luiz Cruz - 2025
"""
        
        print(report)
        
        # Salva relat√≥rio
        try:
            with open("simplified_test_report.txt", "w", encoding="utf-8") as f:
                f.write(report)
            print("üìÅ Relat√≥rio salvo em: simplified_test_report.txt")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar relat√≥rio: {e}")
        
        # Salva dados CSV
        try:
            with open("simplified_test_data.csv", "w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(["timestamp", "type", "value", "node_id"])
                
                for data in self.metrics.data:
                    writer.writerow([
                        data["timestamp"].isoformat(),
                        data["type"],
                        data["value"],
                        data["node_id"]
                    ])
            
            print("üìä Dados salvos em: simplified_test_data.csv")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao salvar dados: {e}")
    
    def stop_test(self):
        """Para o teste"""
        self.running = False
        print("üõë Parando todos os n√≥s...")
        
        for node in self.nodes.values():
            try:
                node.stop()
            except:
                pass
        
        print("‚úÖ Todos os n√≥s parados")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ AEONCOSMA SIMPLIFIED ECOSYSTEM TEST")
    print("Teste de Valida√ß√£o da Arquitetura P2P")
    print("Usando apenas bibliotecas padr√£o do Python")
    print("Desenvolvido por Luiz Cruz - 2025")
    print("=" * 60)
    
    print("üéØ OBJETIVOS DO TESTE:")
    print("   ‚Ä¢ Validar descoberta autom√°tica de peers")
    print("   ‚Ä¢ Testar escalabilidade at√© 100 n√≥s")
    print("   ‚Ä¢ Medir estabilidade da rede P2P")
    print("   ‚Ä¢ Gerar m√©tricas para valida√ß√£o comercial")
    
    print(f"\nüìä CONFIGURA√á√ÉO:")
    print(f"   ‚Ä¢ M√°ximo de n√≥s: {SIMPLE_CONFIG['max_nodes']}")
    print(f"   ‚Ä¢ Fases: {len(SIMPLE_CONFIG['phases'])}")
    print(f"   ‚Ä¢ Dura√ß√£o: {SIMPLE_CONFIG['test_duration']} segundos")
    print(f"   ‚Ä¢ Portas: {SIMPLE_CONFIG['base_port']}+")
    
    response = input("\nüöÄ Executar teste simplificado? (s/N): ")
    if response.lower() not in ['s', 'sim', 'yes', 'y']:
        print("‚ùå Teste cancelado")
        return
    
    # Executa teste
    orchestrator = SimpleOrchestrator()
    
    try:
        orchestrator.run_ecosystem_test()
    except KeyboardInterrupt:
        print("\nüõë Teste interrompido")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    finally:
        orchestrator.stop_test()
        print("\n‚úÖ TESTE CONCLU√çDO")

if __name__ == "__main__":
    main()
