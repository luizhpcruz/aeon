"""
üß¨ DNA C√ìSMICO AEONCOSMA
Codifica√ß√£o gen√©tica do universo para trading evolutivo
Desenvolvido por Luiz Cruz - 2025
"""

import numpy as np
import matplotlib.pyplot as plt
from typing import Dict, List, Tuple, Optional
import random
import json
from dataclasses import dataclass
from enum import Enum
import logging

class CosmicBase(Enum):
    """Bases do DNA C√≥smico an√°logas ao DNA biol√≥gico"""
    G = "Gravity"      # Gravita√ß√£o - tend√™ncia de atra√ß√£o/queda
    H = "Planck"       # Constante de Planck - quantiza√ß√£o
    C = "Light"        # Velocidade da luz - momentum/velocidade
    A = "Alpha"        # Constante de estrutura fina - estabilidade

class CosmicEra(Enum):
    """Eras c√≥smicas para sequenciamento do DNA"""
    INFLATION = "inflation"
    RADIATION = "radiation"
    MATTER = "matter"
    DARK_ENERGY = "dark_energy"
    HEAT_DEATH = "heat_death"

@dataclass
class CosmicGene:
    """Gene c√≥smico individual"""
    base: CosmicBase
    era: CosmicEra
    strength: float  # 0.0 to 1.0
    trading_impact: float  # -1.0 to 1.0
    mutation_rate: float = 0.01

class CosmicDNA:
    """
    DNA C√≥smico - Codifica√ß√£o gen√©tica do universo
    Cada sequ√™ncia representa evolu√ß√£o c√≥smica e estrat√©gias de trading
    """
    
    def __init__(self, sequence_length: int = 1024):
        self.sequence_length = sequence_length
        self.genes: List[CosmicGene] = []
        self.fitness_score = 1.0
        self.generation = 1
        self.trading_performance = []
        
        # Constantes f√≠sicas reais
        self.physical_constants = {
            'G': 6.67430e-11,      # Constante gravitacional
            'h': 6.62607015e-34,   # Constante de Planck
            'c': 299792458,        # Velocidade da luz
            'alpha': 0.0072973525693  # Constante de estrutura fina
        }
        
        self.logger = logging.getLogger("CosmicDNA")
        self._generate_initial_sequence()
    
    def _generate_initial_sequence(self):
        """Gera sequ√™ncia inicial baseada em evolu√ß√£o c√≥smica"""
        self.logger.info("üß¨ Generating initial cosmic DNA sequence...")
        
        # Distribui√ß√£o das eras c√≥smicas
        era_distribution = {
            CosmicEra.INFLATION: 0.01,     # 1% - era muito curta
            CosmicEra.RADIATION: 0.09,     # 9% - era da radia√ß√£o
            CosmicEra.MATTER: 0.40,        # 40% - era da mat√©ria
            CosmicEra.DARK_ENERGY: 0.49,   # 49% - era atual
            CosmicEra.HEAT_DEATH: 0.01     # 1% - futuro distante
        }
        
        # Gera genes baseados na distribui√ß√£o c√≥smica
        for i in range(self.sequence_length):
            # Escolhe era baseada na distribui√ß√£o
            era = self._weighted_random_choice(era_distribution)
            
            # Escolhe base baseada na era
            base = self._era_to_base_mapping(era, i)
            
            # Calcula for√ßa baseada em constantes f√≠sicas
            strength = self._calculate_gene_strength(base, era)
            
            # Calcula impacto no trading
            trading_impact = self._calculate_trading_impact(base, era, i)
            
            gene = CosmicGene(
                base=base,
                era=era,
                strength=strength,
                trading_impact=trading_impact,
                mutation_rate=0.01
            )
            
            self.genes.append(gene)
        
        self.logger.info(f"‚úÖ Generated {len(self.genes)} cosmic genes")
    
    def _weighted_random_choice(self, weights: Dict) -> CosmicEra:
        """Escolha aleat√≥ria ponderada"""
        items = list(weights.keys())
        weights_list = list(weights.values())
        return np.random.choice(items, p=weights_list)
    
    def _era_to_base_mapping(self, era: CosmicEra, position: int) -> CosmicBase:
        """Mapeia era c√≥smica para base dominante"""
        # Mapeamento baseado em f√≠sica
        mapping = {
            CosmicEra.INFLATION: [CosmicBase.H, CosmicBase.C],  # Quantum + velocidade
            CosmicEra.RADIATION: [CosmicBase.C, CosmicBase.A],  # Luz + intera√ß√£o EM
            CosmicEra.MATTER: [CosmicBase.G, CosmicBase.A],     # Gravidade + estrutura
            CosmicEra.DARK_ENERGY: [CosmicBase.A, CosmicBase.H], # Mist√©rio qu√¢ntico
            CosmicEra.HEAT_DEATH: [CosmicBase.H]                # S√≥ quantum restante
        }
        
        possible_bases = mapping.get(era, list(CosmicBase))
        
        # Adiciona varia√ß√£o baseada na posi√ß√£o
        if position % 137 == 0:  # Constante de estrutura fina
            return CosmicBase.A
        elif position % 42 == 0:  # Resposta para tudo
            return random.choice(list(CosmicBase))
        else:
            return random.choice(possible_bases)
    
    def _calculate_gene_strength(self, base: CosmicBase, era: CosmicEra) -> float:
        """Calcula for√ßa do gene baseada em constantes f√≠sicas"""
        base_strengths = {
            CosmicBase.G: self.physical_constants['G'] * 1e11,  # Normalizado
            CosmicBase.H: self.physical_constants['h'] * 1e34,  # Normalizado
            CosmicBase.C: self.physical_constants['c'] / 3e8,   # Normalizado
            CosmicBase.A: self.physical_constants['alpha'] * 137 # Normalizado
        }
        
        # Modifica for√ßa baseada na era
        era_modifiers = {
            CosmicEra.INFLATION: 2.0,      # Era de alta energia
            CosmicEra.RADIATION: 1.5,      # Era energ√©tica
            CosmicEra.MATTER: 1.0,         # Era est√°vel
            CosmicEra.DARK_ENERGY: 0.8,    # Era misteriosa
            CosmicEra.HEAT_DEATH: 0.1      # Era de baixa energia
        }
        
        base_strength = base_strengths[base]
        era_modifier = era_modifiers[era]
        
        return min(base_strength * era_modifier, 1.0)
    
    def _calculate_trading_impact(self, base: CosmicBase, era: CosmicEra, position: int) -> float:
        """Calcula impacto no trading"""
        # Impactos base por tipo
        base_impacts = {
            CosmicBase.G: -0.3,  # Gravidade puxa para baixo
            CosmicBase.H: 0.1,   # Quantiza√ß√£o - pequenos saltos
            CosmicBase.C: 0.5,   # Velocidade - momentum positivo
            CosmicBase.A: 0.0    # Estabilidade - neutro
        }
        
        # Modificadores por era
        era_multipliers = {
            CosmicEra.INFLATION: 3.0,      # Crescimento explosivo
            CosmicEra.RADIATION: 1.5,      # Crescimento r√°pido
            CosmicEra.MATTER: 1.0,         # Crescimento est√°vel
            CosmicEra.DARK_ENERGY: -0.5,   # Acelera√ß√£o misteriosa
            CosmicEra.HEAT_DEATH: -2.0     # Decl√≠nio
        }
        
        base_impact = base_impacts[base]
        era_multiplier = era_multipliers[era]
        
        # Adiciona varia√ß√£o baseada na posi√ß√£o
        position_factor = np.sin(position * 0.01) * 0.1
        
        final_impact = (base_impact * era_multiplier) + position_factor
        return np.clip(final_impact, -1.0, 1.0)
    
    def mutate(self, mutation_intensity: float = 1.0):
        """Aplica muta√ß√µes ao DNA c√≥smico"""
        mutations_applied = 0
        
        for gene in self.genes:
            if random.random() < gene.mutation_rate * mutation_intensity:
                # Tipo de muta√ß√£o aleat√≥ria
                mutation_type = random.choice(['base', 'era', 'strength', 'trading'])
                
                if mutation_type == 'base':
                    gene.base = random.choice(list(CosmicBase))
                elif mutation_type == 'era':
                    gene.era = random.choice(list(CosmicEra))
                elif mutation_type == 'strength':
                    gene.strength = random.random()
                elif mutation_type == 'trading':
                    gene.trading_impact = random.uniform(-1.0, 1.0)
                
                mutations_applied += 1
        
        self.generation += 1
        self.logger.info(f"üß¨ Applied {mutations_applied} mutations. Generation: {self.generation}")
    
    def crossover(self, other_dna: 'CosmicDNA') -> 'CosmicDNA':
        """Cruzamento gen√©tico entre dois DNAs c√≥smicos"""
        child_dna = CosmicDNA(self.sequence_length)
        child_dna.genes = []
        
        # Ponto de cruzamento aleat√≥rio
        crossover_point = random.randint(0, self.sequence_length)
        
        # Combina genes dos pais
        for i in range(self.sequence_length):
            if i < crossover_point:
                parent_gene = self.genes[i]
            else:
                parent_gene = other_dna.genes[i]
            
            # Cria gene filho com caracter√≠sticas h√≠bridas
            child_gene = CosmicGene(
                base=parent_gene.base,
                era=parent_gene.era,
                strength=(parent_gene.strength + other_dna.genes[i].strength) / 2,
                trading_impact=(parent_gene.trading_impact + other_dna.genes[i].trading_impact) / 2
            )
            
            child_dna.genes.append(child_gene)
        
        child_dna.generation = max(self.generation, other_dna.generation) + 1
        self.logger.info(f"üß¨ Crossover completed. Child generation: {child_dna.generation}")
        
        return child_dna
    
    def generate_trading_strategy(self, market_data: Dict) -> Dict:
        """Gera estrat√©gia de trading baseada no DNA c√≥smico"""
        # Analisa sequ√™ncia gen√©tica atual
        era_counts = {}
        base_counts = {}
        total_trading_impact = 0.0
        
        for gene in self.genes:
            era_counts[gene.era] = era_counts.get(gene.era, 0) + 1
            base_counts[gene.base] = base_counts.get(gene.base, 0) + 1
            total_trading_impact += gene.trading_impact * gene.strength
        
        # Era dominante
        dominant_era = max(era_counts, key=era_counts.get)
        
        # Base dominante
        dominant_base = max(base_counts, key=base_counts.get)
        
        # Estrat√©gias por era
        era_strategies = {
            CosmicEra.INFLATION: {'type': 'aggressive_growth', 'risk': 'very_high', 'timeframe': 'minutes'},
            CosmicEra.RADIATION: {'type': 'high_frequency', 'risk': 'high', 'timeframe': 'seconds'},
            CosmicEra.MATTER: {'type': 'value_investing', 'risk': 'low', 'timeframe': 'days'},
            CosmicEra.DARK_ENERGY: {'type': 'alternative', 'risk': 'medium', 'timeframe': 'hours'},
            CosmicEra.HEAT_DEATH: {'type': 'conservative', 'risk': 'very_low', 'timeframe': 'weeks'}
        }
        
        base_strategy = era_strategies[dominant_era]
        
        # Sinal de trading normalizado
        trading_signal = np.tanh(total_trading_impact / len(self.genes))
        
        strategy = {
            'dna_generation': self.generation,
            'dominant_era': dominant_era.value,
            'dominant_base': dominant_base.value,
            'base_strategy': base_strategy,
            'trading_signal': float(trading_signal),
            'confidence': self.fitness_score,
            'era_distribution': {era.value: count for era, count in era_counts.items()},
            'base_distribution': {base.value: count for base, count in base_counts.items()},
            'sequence_length': len(self.genes)
        }
        
        return strategy
    
    def evaluate_fitness(self, trading_results: List[Dict]) -> float:
        """Avalia fitness baseado em resultados de trading"""
        if not trading_results:
            return self.fitness_score
        
        # Calcula m√©tricas de performance
        total_return = sum(result.get('return', 0) for result in trading_results)
        win_rate = sum(1 for result in trading_results if result.get('return', 0) > 0) / len(trading_results)
        
        # Penaliza alta volatilidade
        returns = [result.get('return', 0) for result in trading_results]
        volatility_penalty = np.std(returns) if len(returns) > 1 else 0
        
        # Fitness = retorno * taxa de sucesso - penalidade de volatilidade
        new_fitness = (total_return * win_rate) - (volatility_penalty * 0.1)
        
        # Suaviza mudan√ßas no fitness
        self.fitness_score = 0.7 * self.fitness_score + 0.3 * new_fitness
        
        # Armazena performance
        self.trading_performance.append({
            'generation': self.generation,
            'fitness': self.fitness_score,
            'total_return': total_return,
            'win_rate': win_rate,
            'volatility': volatility_penalty
        })
        
        return self.fitness_score
    
    def get_sequence_as_string(self) -> str:
        """Retorna sequ√™ncia como string leg√≠vel"""
        return ''.join([gene.base.name for gene in self.genes])
    
    def get_dna_status(self) -> Dict:
        """Status completo do DNA c√≥smico"""
        era_counts = {}
        base_counts = {}
        
        for gene in self.genes:
            era_counts[gene.era.value] = era_counts.get(gene.era.value, 0) + 1
            base_counts[gene.base.value] = base_counts.get(gene.base.value, 0) + 1
        
        return {
            'sequence_length': len(self.genes),
            'generation': self.generation,
            'fitness_score': self.fitness_score,
            'era_distribution': era_counts,
            'base_distribution': base_counts,
            'performance_history': self.trading_performance[-10:],  # √öltimas 10
            'sequence_sample': self.get_sequence_as_string()[:50] + "..."
        }

if __name__ == "__main__":
    # Teste do DNA C√≥smico
    print("üß¨ AEONCOSMA - DNA C√ìSMICO")
    print("="*50)
    
    # Cria√ß√£o do DNA
    cosmic_dna = CosmicDNA(sequence_length=256)
    
    print(f"üß¨ DNA criado com {len(cosmic_dna.genes)} genes")
    print(f"üìä Gera√ß√£o: {cosmic_dna.generation}")
    print(f"‚≠ê Fitness: {cosmic_dna.fitness_score:.3f}")
    
    # Gera estrat√©gia de trading
    market_data = {'price': 50000, 'volume': 1000000}
    strategy = cosmic_dna.generate_trading_strategy(market_data)
    
    print(f"\nüìà ESTRAT√âGIA GERADA:")
    print(f"Era dominante: {strategy['dominant_era']}")
    print(f"Base dominante: {strategy['dominant_base']}")
    print(f"Tipo: {strategy['base_strategy']['type']}")
    print(f"Sinal: {strategy['trading_signal']:.3f}")
    
    # Muta√ß√£o
    print(f"\nüß¨ Aplicando muta√ß√£o...")
    cosmic_dna.mutate(mutation_intensity=0.5)
    
    # Status final
    status = cosmic_dna.get_dna_status()
    print(f"üìä Nova gera√ß√£o: {status['generation']}")
    print(f"üß¨ Sequ√™ncia (sample): {status['sequence_sample']}")
    
    print("\n‚úÖ DNA C√≥smico funcionando perfeitamente!")
