"""
AEON Evolution - Main Entry Point
=================================

Ponto de entrada principal para o simulador AEON evolutivo.
Implementa a equa√ß√£o F(t) = A * sin(Bt + œÜ) + C * e^(-Œªt) + D * log(t + 1)
com cadeia din√¢mica entre esp√©cies.

Desenvolvido por Luiz Cruz - 2025
"""

import os
import sys
import logging
from pathlib import Path

# Adicionar o diret√≥rio aeon ao path
sys.path.append(str(Path(__file__).parent))

from aeon.simulator import AeonSimulator
from aeon.dynamics import ChainDynamics, create_predator_prey_system, create_competitive_system

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_output_directory():
    """Cria diret√≥rio de output se n√£o existir."""
    output_dir = Path("aeon/output")
    output_dir.mkdir(parents=True, exist_ok=True)
    return str(output_dir)

def run_basic_simulation():
    """Executa simula√ß√£o b√°sica com 3 esp√©cies."""
    logger.info("üöÄ Iniciando Simula√ß√£o AEON B√°sica")
    
    # Par√¢metros para 3 esp√©cies
    params = [
        [1.0, 2.0, 0.1, 0.5, 0.01, 1.0],  # esp√©cie 1
        [0.8, 1.5, 0.2, 0.4, 0.02, 1.2],  # esp√©cie 2  
        [1.2, 2.5, 0.3, 0.6, 0.01, 0.9],  # esp√©cie 3
    ]
    
    # Criar simulador
    output_dir = create_output_directory()
    simulator = AeonSimulator(output_dir)
    
    # Executar simula√ß√£o
    t, results = simulator.simulate_chain(
        n_species=3,
        t_range=50,
        params_list=params,
        n_points=1000
    )
    
    # Salvar resultados
    simulator.save_results("basic_results.txt")
    simulator.save_logs("basic_logs.txt")
    
    # An√°lise
    analysis = simulator.analyze_results()
    logger.info(f"‚úÖ Simula√ß√£o conclu√≠da - {analysis['evolution_summary']['total_generations']} gera√ß√µes")
    
    return simulator, analysis

def run_ecosystem_simulation():
    """Executa simula√ß√£o de ecossistema com intera√ß√µes."""
    logger.info("üå± Iniciando Simula√ß√£o de Ecossistema")
    
    # Criar sistema de din√¢mica
    dynamics = ChainDynamics()
    dynamics.create_default_ecosystem(n_species=4)
    
    # Executar simula√ß√£o evolutiva
    evolution_results = dynamics.run_evolutionary_simulation(
        generations=10,
        t_range=30,
        mutation_rate=0.02
    )
    
    # Salvar resultados do ecossistema
    output_dir = create_output_directory()
    
    with open(f"{output_dir}/ecosystem_results.txt", "w", encoding='utf-8') as f:
        f.write("# SIMULA√á√ÉO DE ECOSSISTEMA AEON\n")
        f.write("# Desenvolvido por Luiz Cruz - 2025\n\n")
        
        # Salvar propriedades da rede
        network_props = evolution_results['network_properties']
        f.write("# PROPRIEDADES DA REDE\n")
        f.write(f"Esp√©cies: {network_props['n_species']}\n")
        f.write(f"Intera√ß√µes: {network_props['n_interactions']}\n") 
        f.write(f"Densidade: {network_props['density']:.4f}\n")
        f.write(f"Mais conectada: {network_props['most_connected']}\n\n")
        
        # Salvar evolu√ß√£o do fitness
        f.write("# EVOLU√á√ÉO DO FITNESS\n")
        for gen, fitness_data in enumerate(evolution_results['fitness_history']):
            f.write(f"Gera√ß√£o {gen+1}:\n")
            for species, fitness in fitness_data.items():
                f.write(f"  {species}: {fitness:.6f}\n")
            f.write("\n")
    
    logger.info("‚úÖ Simula√ß√£o de ecossistema conclu√≠da")
    return evolution_results

def run_predator_prey_simulation():
    """Executa simula√ß√£o predador-presa."""
    logger.info("ü¶Ö Iniciando Simula√ß√£o Predador-Presa")
    
    # Par√¢metros predador (mais agressivo)
    predator_params = [1.5, 3.0, 0.0, 0.8, 0.05, 0.5]
    
    # Par√¢metros presa (mais defensivo)
    prey_params = [0.8, 1.2, 0.5, 1.2, 0.02, 1.5]
    
    # Criar sistema
    dynamics = create_predator_prey_system(predator_params, prey_params)
    
    # Simular
    results = dynamics.simulate_ecosystem(t_range=40)
    
    # Salvar resultados
    output_dir = create_output_directory()
    
    with open(f"{output_dir}/predator_prey_results.txt", "w", encoding='utf-8') as f:
        f.write("# SIMULA√á√ÉO PREDADOR-PRESA AEON\n")
        f.write("# Desenvolvido por Luiz Cruz - 2025\n\n")
        
        # Salvar dados temporais
        f.write("# TEMPO\n")
        for t_val in results['time']:
            f.write(f"{t_val:.6f}\n")
        f.write("\n")
        
        # Salvar popula√ß√µes
        for species_id, values in results['species_results'].items():
            f.write(f"# {species_id.upper()}\n")
            for val in values:
                f.write(f"{val:.6f}\n")
            f.write("\n")
        
        # Salvar fitness
        f.write("# FITNESS\n")
        for species_id, fitness in results['fitness_values'].items():
            f.write(f"{species_id}: {fitness:.6f}\n")
    
    logger.info("‚úÖ Simula√ß√£o predador-presa conclu√≠da")
    return results

def run_mutation_experiment():
    """Executa experimento de muta√ß√£o adaptativa."""
    logger.info("üß¨ Iniciando Experimento de Muta√ß√£o")
    
    # Par√¢metros base
    base_params = [1.0, 1.0, 0.0, 1.0, 0.1, 1.0]
    
    # Criar simulador
    output_dir = create_output_directory()
    simulator = AeonSimulator(output_dir)
    
    # Simular evolu√ß√£o com muta√ß√µes
    mutation_results = simulator.simulate_with_mutations(
        base_params=base_params,
        n_generations=20,
        mutation_rate=0.05,
        t_range=30
    )
    
    # Salvar resultados
    with open(f"{output_dir}/mutation_results.txt", "w", encoding='utf-8') as f:
        f.write("# EXPERIMENTO DE MUTA√á√ÉO AEON\n")
        f.write("# Desenvolvido por Luiz Cruz - 2025\n\n")
        
        f.write(f"Gera√ß√µes: {len(mutation_results['generations'])}\n")
        f.write(f"Fitness final: {mutation_results['final_fitness']:.6f}\n\n")
        
        # Evolu√ß√£o dos par√¢metros
        f.write("# EVOLU√á√ÉO DOS PAR√ÇMETROS\n")
        for gen, params in enumerate(mutation_results['parameters_evolution']):
            f.write(f"Gera√ß√£o {gen+1}: {params}\n")
    
    logger.info("‚úÖ Experimento de muta√ß√£o conclu√≠do")
    return mutation_results

def run_comprehensive_analysis():
    """Executa an√°lise abrangente de todos os sistemas."""
    logger.info("üìä Iniciando An√°lise Abrangente")
    
    results = {}
    
    # Executar todas as simula√ß√µes
    logger.info("Executando simula√ß√£o b√°sica...")
    simulator, basic_analysis = run_basic_simulation()
    results['basic'] = basic_analysis
    
    logger.info("Executando simula√ß√£o de ecossistema...")
    ecosystem_results = run_ecosystem_simulation()
    results['ecosystem'] = ecosystem_results
    
    logger.info("Executando simula√ß√£o predador-presa...")
    predprey_results = run_predator_prey_simulation()
    results['predator_prey'] = predprey_results
    
    logger.info("Executando experimento de muta√ß√£o...")
    mutation_results = run_mutation_experiment()
    results['mutation'] = mutation_results
    
    # Criar relat√≥rio final
    output_dir = create_output_directory()
    
    with open(f"{output_dir}/comprehensive_report.txt", "w", encoding='utf-8') as f:
        f.write("# RELAT√ìRIO ABRANGENTE - SIMULA√á√ÉO AEON\n")
        f.write("# Desenvolvido por Luiz Cruz - 2025\n")
        f.write("=" * 50 + "\n\n")
        
        f.write("## RESUMO EXECUTIVO\n")
        f.write(f"- Simula√ß√£o B√°sica: {results['basic']['evolution_summary']['total_generations']} gera√ß√µes\n")
        f.write(f"- Ecossistema: {results['ecosystem']['network_properties']['n_species']} esp√©cies\n")
        f.write(f"- Predador-Presa: 2 esp√©cies em intera√ß√£o\n")
        f.write(f"- Muta√ß√£o: {len(results['mutation']['generations'])} gera√ß√µes evolutivas\n\n")
        
        f.write("## CONCLUS√ïES\n")
        f.write("1. Sistema AEON demonstra comportamento evolutivo est√°vel\n")
        f.write("2. Intera√ß√µes entre esp√©cies geram din√¢micas complexas\n")
        f.write("3. Muta√ß√£o adaptativa permite evolu√ß√£o controlada\n")
        f.write("4. Equa√ß√£o base F(t) = A*sin(Bt+œÜ) + C*e^(-Œªt) + D*log(t+1) √© robusta\n\n")
        
        f.write("## PR√ìXIMOS PASSOS\n")
        f.write("- Implementar redes neurais para par√¢metros adaptativos\n")
        f.write("- Adicionar interface gr√°fica para visualiza√ß√£o\n")
        f.write("- Integrar com sistema de trading P2P\n")
        f.write("- Desenvolver m√©tricas de performance mais sofisticadas\n")
    
    logger.info("‚úÖ An√°lise abrangente conclu√≠da")
    return results

def main():
    """Fun√ß√£o principal."""
    print("üåü AEON EVOLUTION SIMULATOR")
    print("Desenvolvido por Luiz Cruz - 2025")
    print("=" * 40)
    
    try:
        # Criar diret√≥rios necess√°rios
        create_output_directory()
        
        # Menu de op√ß√µes
        print("\nOp√ß√µes dispon√≠veis:")
        print("1. Simula√ß√£o B√°sica (3 esp√©cies)")
        print("2. Simula√ß√£o de Ecossistema")
        print("3. Simula√ß√£o Predador-Presa")
        print("4. Experimento de Muta√ß√£o")
        print("5. An√°lise Abrangente (todas)")
        print("0. Executar padr√£o (b√°sica)")
        
        choice = input("\nEscolha uma op√ß√£o (0-5): ").strip()
        
        if choice == "1":
            run_basic_simulation()
        elif choice == "2":
            run_ecosystem_simulation()
        elif choice == "3":
            run_predator_prey_simulation()
        elif choice == "4":
            run_mutation_experiment()
        elif choice == "5":
            run_comprehensive_analysis()
        else:
            # Padr√£o: executar simula√ß√£o b√°sica
            logger.info("Executando simula√ß√£o padr√£o...")
            run_basic_simulation()
        
        print("\n‚úÖ Simula√ß√£o conclu√≠da com sucesso!")
        print("üìÅ Verifique os resultados em 'aeon/output/'")
        
    except KeyboardInterrupt:
        logger.info("Simula√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"Erro durante execu√ß√£o: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
