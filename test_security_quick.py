# test_security_quick.py
"""
üß™ TESTE R√ÅPIDO DO SISTEMA DE SEGURAN√áA AEONCOSMA
Verifica√ß√£o completa de todos os componentes de seguran√ßa
"""

from security.aeoncosma_security_lock import AeonSecurityLock, enforce_security

def main():
    print("üîé TESTE COMPLETO DO SISTEMA DE SEGURAN√áA AEONCOSMA")
    print("=" * 60)
    
    try:
        # Teste b√°sico da classe
        print("\nüîí INICIANDO TESTES DE SEGURAN√áA...")
        security_lock = AeonSecurityLock()
        
        # Teste 1: Localhost
        print("\n1Ô∏è‚É£ TESTANDO LOCALHOST:")
        try:
            security_lock.enforce_localhost_only()
            print("   ‚úÖ Localhost OK")
        except Exception as e:
            print(f"   ‚ùå Localhost FALHOU: {e}")
            
        # Teste 2: Root Prevention  
        print("\n2Ô∏è‚É£ TESTANDO PREVEN√á√ÉO ROOT:")
        try:
            security_lock.prevent_root_execution()
            print("   ‚úÖ Root Prevention OK")
        except Exception as e:
            print(f"   ‚ùå Root Prevention FALHOU: {e}")
            
        # Teste 3: Argumentos perigosos
        print("\n3Ô∏è‚É£ TESTANDO ARGUMENTOS:")
        try:
            security_lock.block_autorun_arguments()
            print("   ‚úÖ Autorun Arguments OK")
        except Exception as e:
            print(f"   ‚ùå Autorun Arguments FALHOU: {e}")
            
        # Teste 4: Fingerprint
        print("\n4Ô∏è‚É£ TESTANDO FINGERPRINT:")
        try:
            security_lock.fingerprint_check()
            print("   ‚úÖ Fingerprint OK")
        except Exception as e:
            print(f"   ‚ùå Fingerprint FALHOU: {e}")
            
        # Teste 5: Integridade
        print("\n5Ô∏è‚É£ TESTANDO INTEGRIDADE:")
        try:
            security_lock.integrity_verification()
            print("   ‚úÖ Integridade OK")
        except Exception as e:
            print(f"   ‚ùå Integridade FALHOU: {e}")
            
        # Teste 6: Rede
        print("\n6Ô∏è‚É£ TESTANDO CONFIGURA√á√ÉO DE REDE:")
        try:
            security_lock.check_network_security("127.0.0.1", 9000)
            print("   ‚úÖ Configura√ß√£o de rede OK")
        except Exception as e:
            print(f"   ‚ùå Configura√ß√£o de rede FALHOU: {e}")
            
        # Teste completo usando fun√ß√£o de conveni√™ncia
        print("\nüõ°Ô∏è TESTE COMPLETO DE ENFORCEMENT:")
        try:
            complete_lock = enforce_security()
            print("   ‚úÖ ENFORCEMENT COMPLETO OK")
        except Exception as e:
            print(f"   ‚ùå ENFORCEMENT FALHOU: {e}")
            
        # Teste de relat√≥rio
        print("\nüìä TESTANDO RELAT√ìRIO DE SEGURAN√áA:")
        try:
            report = security_lock.get_security_report(1)
            print(f"   ‚úÖ Relat√≥rio gerado: {len(report['events_summary'])} eventos")
            print(f"   üîç Fingerprint: {report['system_fingerprint']}")
            print(f"   üìà Status: {report['security_status']}")
        except Exception as e:
            print(f"   ‚ùå Relat√≥rio FALHOU: {e}")
            
        print("\n" + "="*60)
        print("üöÄ TESTE DE SEGURAN√áA AEONCOSMA CONCLU√çDO COM SUCESSO!")
        print("üîí Sistema de seguran√ßa est√° funcionando perfeitamente")
        print("üõ°Ô∏è Pronto para deployment em produ√ß√£o")
        
    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO NO TESTE DE SEGURAN√áA: {e}")
        print("üö´ Sistema n√£o pode ser executado com seguran√ßa")
        return False
        
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        exit(1)
