# security/aeoncosma_security_lock.py
"""
üîê AEONCOSMA SECURITY LOCK - Sistema de Seguran√ßa Ultra Avan√ßado
Sistema de prote√ß√£o multi-camadas para o ecossistema AEONCOSMA
Desenvolvido por Luiz Cruz - 2025
"""

import sys
import os
import platform
import hashlib
import json
import time
import subprocess
import re
from datetime import datetime
from typing import Dict, List, Any, Optional
import sqlite3

class AeonSecurityLock:
    """
    üõ°Ô∏è Sistema de Seguran√ßa Principal AEONCOSMA
    Prote√ß√£o contra execu√ß√£o n√£o autorizada e ambientes suspeitos
    """
    
    def __init__(self):
        self.system = platform.system()
        self.authorized_user = 'Luiz'
        self.security_db_path = "security/security_audit.db"
        self.init_security_database()
        
        # Assinatura de integridade do sistema
        self.system_fingerprint = self.generate_system_fingerprint()
        
        print(f"üîí AEONCOSMA Security Lock inicializado ({self.system})")
        
    def init_security_database(self):
        """Inicializa base de dados de auditoria de seguran√ßa"""
        os.makedirs(os.path.dirname(self.security_db_path), exist_ok=True)
        
        conn = sqlite3.connect(self.security_db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS security_events (
                event_id TEXT PRIMARY KEY,
                timestamp TEXT NOT NULL,
                event_type TEXT NOT NULL,
                description TEXT NOT NULL,
                severity TEXT NOT NULL,
                source_module TEXT NOT NULL,
                metadata TEXT NOT NULL
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS execution_log (
                execution_id TEXT PRIMARY KEY,
                timestamp TEXT NOT NULL,
                module_name TEXT NOT NULL,
                function_name TEXT NOT NULL,
                parameters TEXT NOT NULL,
                result TEXT NOT NULL,
                execution_time REAL NOT NULL
            )
        """)
        
        conn.commit()
        conn.close()
        
    def generate_system_fingerprint(self) -> str:
        """Gera fingerprint √∫nico do sistema"""
        fingerprint_data = {
            "system": self.system,
            "python_version": sys.version,
            "platform": platform.platform(),
            "user": os.getlogin() if hasattr(os, 'getlogin') else "unknown",
            "working_directory": os.getcwd()
        }
        
        fingerprint_str = json.dumps(fingerprint_data, sort_keys=True)
        return hashlib.sha256(fingerprint_str.encode()).hexdigest()[:16]
        
    def log_security_event(self, event_type: str, description: str, 
                          severity: str, source_module: str, metadata: Dict[str, Any] = None):
        """Registra evento de seguran√ßa"""
        event_id = hashlib.sha256(f"{time.time()}-{event_type}-{description}".encode()).hexdigest()[:16]
        
        conn = sqlite3.connect(self.security_db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO security_events 
            (event_id, timestamp, event_type, description, severity, source_module, metadata)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            event_id, datetime.now().isoformat(), event_type, description,
            severity, source_module, json.dumps(metadata or {})
        ))
        
        conn.commit()
        conn.close()
        
        # Log cr√≠tico vai para console tamb√©m
        if severity in ["CRITICAL", "HIGH"]:
            print(f"üö® SECURITY {severity}: {description}")
            
    def log_execution(self, function_name: str, parameters: Dict[str, Any], 
                     result: str = "SUCCESS", module_name: str = "unknown"):
        """Registra execu√ß√£o de fun√ß√£o para auditoria"""
        execution_id = hashlib.sha256(f"{time.time()}-{function_name}".encode()).hexdigest()[:16]
        start_time = time.time()
        
        conn = sqlite3.connect(self.security_db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO execution_log
            (execution_id, timestamp, module_name, function_name, parameters, result, execution_time)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            execution_id, datetime.now().isoformat(), module_name, function_name,
            json.dumps(parameters), result, time.time() - start_time
        ))
        
        conn.commit()
        conn.close()
        
    def enforce_localhost_only(self):
        """For√ßa execu√ß√£o apenas em localhost"""
        try:
            forbidden_args = ['--remote', '--external', '--public', '--0.0.0.0']
            forbidden_env = ['AEON_REMOTE', 'REMOTE_ACCESS', 'PUBLIC_ACCESS']
            
            # Verifica argumentos suspeitos
            if any(arg in sys.argv for arg in forbidden_args):
                violation = f"Argumento remoto detectado: {sys.argv}"
                self.log_security_event("REMOTE_ACCESS_ATTEMPT", violation, "CRITICAL", "security_lock")
                raise PermissionError(f"‚ùå Execu√ß√£o remota n√£o autorizada: {violation}")
                
            # Verifica vari√°veis de ambiente suspeitas
            for env_var in forbidden_env:
                if os.environ.get(env_var) == '1':
                    violation = f"Vari√°vel de ambiente remota: {env_var}"
                    self.log_security_event("REMOTE_ENV_DETECTED", violation, "CRITICAL", "security_lock")
                    raise PermissionError(f"‚ùå Configura√ß√£o remota detectada: {violation}")
                    
            self.log_security_event("LOCALHOST_CHECK", "Verifica√ß√£o localhost OK", "INFO", "security_lock")
            
        except Exception as e:
            self.log_security_event("LOCALHOST_CHECK_ERROR", str(e), "HIGH", "security_lock")
            raise
            
    def prevent_root_execution(self):
        """Previne execu√ß√£o como root/administrador"""
        try:
            if self.system != 'Windows':
                try:
                    if os.geteuid() == 0:
                        violation = "Execu√ß√£o como root detectada"
                        self.log_security_event("ROOT_EXECUTION", violation, "CRITICAL", "security_lock")
                        raise PermissionError("‚ùå Execu√ß√£o como root √© proibida.")
                except AttributeError:
                    pass  # Sistema sem geteuid
            else:
                # Windows: verifica se √© administrador
                try:
                    is_admin = subprocess.run(['net', 'session'], capture_output=True, text=True).returncode == 0
                    if is_admin:
                        violation = "Execu√ß√£o como administrador detectada"
                        self.log_security_event("ADMIN_EXECUTION", violation, "HIGH", "security_lock")
                        print("‚ö†Ô∏è Executando como administrador - cuidado extra necess√°rio")
                except:
                    pass
                    
            self.log_security_event("ROOT_CHECK", "Verifica√ß√£o privil√©gios OK", "INFO", "security_lock")
            
        except Exception as e:
            self.log_security_event("ROOT_CHECK_ERROR", str(e), "HIGH", "security_lock")
            raise
            
    def block_autorun_arguments(self):
        """Bloqueia argumentos perigosos de auto-execu√ß√£o"""
        try:
            dangerous_args = [
                '--autorun', '--unsafe', '--dev-bypass', '--skip-security',
                '--no-validation', '--force', '--override', '--admin-mode',
                '--debug-unsafe', '--production-override'
            ]
            
            detected_args = [arg for arg in sys.argv if arg in dangerous_args]
            
            if detected_args:
                violation = f"Argumentos perigosos detectados: {detected_args}"
                self.log_security_event("DANGEROUS_ARGS", violation, "CRITICAL", "security_lock")
                raise PermissionError(f"‚ùå Argumentos perigosos: {detected_args}")
                
            # Verifica padr√µes suspeitos
            suspicious_patterns = [r'--.*bypass.*', r'--.*unsafe.*', r'--.*override.*']
            
            for arg in sys.argv:
                for pattern in suspicious_patterns:
                    if re.match(pattern, arg, re.IGNORECASE):
                        violation = f"Padr√£o suspeito detectado: {arg}"
                        self.log_security_event("SUSPICIOUS_PATTERN", violation, "HIGH", "security_lock")
                        raise PermissionError(f"‚ùå Argumento suspeito: {arg}")
                        
            self.log_security_event("ARGS_CHECK", "Verifica√ß√£o argumentos OK", "INFO", "security_lock")
            
        except Exception as e:
            self.log_security_event("ARGS_CHECK_ERROR", str(e), "HIGH", "security_lock")
            raise
            
    def fingerprint_check(self):
        """Verifica fingerprint do usu√°rio e sistema"""
        try:
            # Verifica usu√°rio autorizado
            current_user = os.getlogin() if hasattr(os, 'getlogin') else "unknown"
            
            if current_user != self.authorized_user and current_user != "unknown":
                violation = f"Usu√°rio n√£o autorizado: {current_user}"
                self.log_security_event("UNAUTHORIZED_USER", violation, "CRITICAL", "security_lock")
                raise PermissionError(f"‚ùå Usu√°rio inv√°lido: {current_user}")
                
            # Verifica integridade do ambiente
            current_fingerprint = self.generate_system_fingerprint()
            
            # Log do fingerprint para auditoria
            self.log_security_event("FINGERPRINT_CHECK", f"Fingerprint: {current_fingerprint}", "INFO", "security_lock")
            
            print(f"üë§ Usu√°rio verificado: {current_user}")
            print(f"üîç Fingerprint: {current_fingerprint}")
            
        except Exception as e:
            self.log_security_event("FINGERPRINT_ERROR", str(e), "HIGH", "security_lock")
            raise
            
    def integrity_verification(self):
        """Verifica√ß√£o de integridade do sistema"""
        try:
            critical_files = [
                "security/aeoncosma_security_lock.py",
                "aeoncosma/core/aeon_kernel.py",
                "aeoncosma/cognitive/gpt_node.py"
            ]
            
            integrity_status = {"verified": 0, "missing": 0, "suspicious": 0}
            
            for file_path in critical_files:
                if not os.path.exists(file_path):
                    integrity_status["missing"] += 1
                    self.log_security_event("FILE_MISSING", f"Arquivo cr√≠tico ausente: {file_path}", "HIGH", "security_lock")
                else:
                    # Verifica tamanho m√≠nimo (arquivo n√£o vazio)
                    if os.path.getsize(file_path) < 100:
                        integrity_status["suspicious"] += 1
                        self.log_security_event("FILE_SUSPICIOUS", f"Arquivo suspeito: {file_path}", "MEDIUM", "security_lock")
                    else:
                        integrity_status["verified"] += 1
                        
            # Verifica se pelo menos 70% dos arquivos cr√≠ticos est√£o OK
            total_files = len(critical_files)
            verified_ratio = integrity_status["verified"] / total_files
            
            if verified_ratio < 0.7:
                violation = f"Integridade comprometida: {integrity_status}"
                self.log_security_event("INTEGRITY_VIOLATION", violation, "CRITICAL", "security_lock")
                raise PermissionError(f"‚ùå Integridade do sistema comprometida: {integrity_status}")
                
            self.log_security_event("INTEGRITY_CHECK", f"Verifica√ß√£o OK: {integrity_status}", "INFO", "security_lock")
            print(f"üîç Integridade verificada: {integrity_status}")
            
        except Exception as e:
            self.log_security_event("INTEGRITY_ERROR", str(e), "HIGH", "security_lock")
            raise
            
    def check_network_security(self, host: str, port: int):
        """Verifica seguran√ßa de configura√ß√µes de rede"""
        try:
            # For√ßa localhost apenas
            if host not in ["127.0.0.1", "localhost", "0.0.0.0"]:
                violation = f"Host externo n√£o permitido: {host}"
                self.log_security_event("EXTERNAL_HOST", violation, "CRITICAL", "security_lock")
                raise PermissionError(f"‚ùå Host externo: {host}")
                
            # Avisa sobre bind em todas as interfaces
            if host == "0.0.0.0":
                warning = f"Bind em todas interfaces detectado: {host}:{port}"
                self.log_security_event("WILDCARD_BIND", warning, "MEDIUM", "security_lock")
                print(f"‚ö†Ô∏è AVISO: Bind em todas as interfaces (0.0.0.0)")
                
            # Verifica portas suspeitas
            dangerous_ports = [22, 23, 80, 443, 3389, 5900]  # SSH, Telnet, HTTP, HTTPS, RDP, VNC
            
            if port in dangerous_ports:
                warning = f"Porta de servi√ßo detectada: {port}"
                self.log_security_event("SERVICE_PORT", warning, "MEDIUM", "security_lock")
                print(f"‚ö†Ô∏è AVISO: Usando porta de servi√ßo padr√£o: {port}")
                
            self.log_security_event("NETWORK_CHECK", f"Rede OK: {host}:{port}", "INFO", "security_lock")
            
        except Exception as e:
            self.log_security_event("NETWORK_ERROR", str(e), "HIGH", "security_lock")
            raise
            
    def enforce_all_security_measures(self):
        """Executa todas as verifica√ß√µes de seguran√ßa obrigat√≥rias"""
        print("üõ°Ô∏è Executando verifica√ß√µes de seguran√ßa AEONCOSMA...")
        
        start_time = time.time()
        
        try:
            self.enforce_localhost_only()
            print("  ‚úÖ Localhost verificado")
            
            self.prevent_root_execution()
            print("  ‚úÖ Privil√©gios verificados")
            
            self.block_autorun_arguments()
            print("  ‚úÖ Argumentos seguros")
            
            self.fingerprint_check()
            print("  ‚úÖ Fingerprint validado")
            
            self.integrity_verification()
            print("  ‚úÖ Integridade confirmada")
            
            execution_time = time.time() - start_time
            
            self.log_execution("enforce_all_security_measures", {
                "execution_time": execution_time,
                "checks_passed": 5
            }, "ALL_CHECKS_PASSED", "security_lock")
            
            print(f"üîí Todas as verifica√ß√µes de seguran√ßa passaram ({execution_time:.2f}s)")
            
        except Exception as e:
            execution_time = time.time() - start_time
            self.log_execution("enforce_all_security_measures", {
                "execution_time": execution_time,
                "error": str(e)
            }, "SECURITY_FAILURE", "security_lock")
            
            print(f"üö´ FALHA DE SEGURAN√áA: {e}")
            raise
            
    def get_security_report(self, last_hours: int = 24) -> Dict[str, Any]:
        """Gera relat√≥rio de seguran√ßa das √∫ltimas horas"""
        conn = sqlite3.connect(self.security_db_path)
        cursor = conn.cursor()
        
        # Timestamp de corte
        cutoff_time = datetime.now().timestamp() - (last_hours * 3600)
        cutoff_iso = datetime.fromtimestamp(cutoff_time).isoformat()
        
        # Eventos de seguran√ßa
        cursor.execute("""
            SELECT event_type, severity, COUNT(*) as count
            FROM security_events
            WHERE timestamp > ?
            GROUP BY event_type, severity
            ORDER BY count DESC
        """, (cutoff_iso,))
        
        events_summary = cursor.fetchall()
        
        # Execu√ß√µes recentes
        cursor.execute("""
            SELECT module_name, function_name, COUNT(*) as count
            FROM execution_log
            WHERE timestamp > ?
            GROUP BY module_name, function_name
            ORDER BY count DESC
            LIMIT 10
        """, (cutoff_iso,))
        
        executions_summary = cursor.fetchall()
        
        conn.close()
        
        return {
            "report_timestamp": datetime.now().isoformat(),
            "period_hours": last_hours,
            "system_fingerprint": self.system_fingerprint,
            "events_summary": [
                {"event_type": row[0], "severity": row[1], "count": row[2]}
                for row in events_summary
            ],
            "executions_summary": [
                {"module": row[0], "function": row[1], "count": row[2]}
                for row in executions_summary
            ],
            "security_status": "ACTIVE"
        }

# Fun√ß√£o de conveni√™ncia para uso r√°pido
def enforce_security():
    """Fun√ß√£o r√°pida para enforcement de seguran√ßa"""
    lock = AeonSecurityLock()
    lock.enforce_all_security_measures()
    return lock

# Teste r√°pido se executado diretamente
if __name__ == "__main__":
    print("üîí TESTE DO SISTEMA DE SEGURAN√áA AEONCOSMA")
    print("=" * 50)
    
    try:
        security_lock = enforce_security()
        print("üöÄ SEGURAN√áA DO AEON FUNCIONANDO PERFEITAMENTE!")
        
        # Gera relat√≥rio de teste
        report = security_lock.get_security_report(1)
        print(f"\nüìä Eventos de seguran√ßa na √∫ltima hora: {len(report['events_summary'])}")
        print(f"üîç Fingerprint do sistema: {report['system_fingerprint']}")
        
    except Exception as e:
        print(f"‚ùå ERRO DE SEGURAN√áA: {e}")
        sys.exit(1)
