#!/usr/bin/env python3
"""
üìä AEONCOSMA SYSTEM MONITOR
Monitor de recursos do sistema usando bibliotecas padr√£o
Desenvolvido por Luiz Cruz - 2025
"""

import os
import platform
import sys
import time
from datetime import datetime

def get_system_info():
    """Coleta informa√ß√µes b√°sicas do sistema"""
    print("üñ•Ô∏è AEONCOSMA SYSTEM MONITOR")
    print("=" * 50)
    print(f"üïí Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üíª Sistema: {platform.system()} {platform.release()}")
    print(f"üêç Python: {sys.version.split()[0]}")
    print(f"‚öôÔ∏è Arquitetura: {platform.machine()}")
    print(f"üíæ Processador: {platform.processor()}")
    
    # Informa√ß√µes de mem√≥ria (Windows)
    if platform.system() == "Windows":
        try:
            import subprocess
            result = subprocess.run(
                ['wmic', 'OS', 'get', 'TotalVisibleMemorySize,FreePhysicalMemory', '/format:value'],
                capture_output=True, text=True
            )
            
            lines = result.stdout.strip().split('\n')
            memory_data = {}
            
            for line in lines:
                if '=' in line:
                    key, value = line.split('=', 1)
                    if value.strip():
                        memory_data[key] = int(value) * 1024  # Convert KB to bytes
            
            if 'TotalVisibleMemorySize' in memory_data and 'FreePhysicalMemory' in memory_data:
                total_memory = memory_data['TotalVisibleMemorySize']
                free_memory = memory_data['FreePhysicalMemory']
                used_memory = total_memory - free_memory
                usage_percent = (used_memory / total_memory) * 100
                
                print(f"üíæ RAM Total: {total_memory / (1024**3):.1f} GB")
                print(f"üíæ RAM Usada: {used_memory / (1024**3):.1f} GB")
                print(f"üíæ RAM Livre: {free_memory / (1024**3):.1f} GB")
                print(f"üíæ RAM Uso: {usage_percent:.1f}%")
            
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel obter info de mem√≥ria: {e}")
    
    # Informa√ß√µes de CPU (aproximada)
    try:
        cpu_count = os.cpu_count()
        print(f"üñ•Ô∏è CPUs: {cpu_count} cores")
        
        # Teste simples de carga da CPU
        start_time = time.time()
        iterations = 100000
        for i in range(iterations):
            pass
        end_time = time.time()
        
        cpu_test_time = end_time - start_time
        print(f"üîÑ Teste CPU: {cpu_test_time:.4f}s para {iterations} itera√ß√µes")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no teste de CPU: {e}")

def get_process_info():
    """Informa√ß√µes sobre processos Python ativos"""
    print("\nüêç PROCESSOS PYTHON ATIVOS:")
    print("-" * 50)
    
    try:
        if platform.system() == "Windows":
            import subprocess
            result = subprocess.run(
                ['tasklist', '/FI', 'IMAGENAME eq python*', '/FO', 'CSV'],
                capture_output=True, text=True
            )
            
            lines = result.stdout.strip().split('\n')
            if len(lines) > 1:
                for line in lines[1:]:  # Skip header
                    if 'python' in line.lower():
                        parts = line.replace('"', '').split(',')
                        if len(parts) >= 5:
                            name = parts[0]
                            pid = parts[1]
                            memory = parts[4]
                            print(f"   üîπ {name} (PID: {pid}) - Mem√≥ria: {memory}")
            else:
                print("   ‚úÖ Nenhum processo Python ativo encontrado")
                
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro ao listar processos: {e}")

def get_network_info():
    """Informa√ß√µes b√°sicas de rede"""
    print("\nüåê INFORMA√á√ïES DE REDE:")
    print("-" * 50)
    
    try:
        import socket
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        
        print(f"   üñ•Ô∏è Hostname: {hostname}")
        print(f"   üåê IP Local: {local_ip}")
        
        # Testa se as portas do AEONCOSMA est√£o livres
        test_ports = [9000, 20000, 25000, 30000]
        print("\n   üîå Status das Portas AEONCOSMA:")
        
        for port in test_ports:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex(('127.0.0.1', port))
                
                if result == 0:
                    print(f"      ‚ùå Porta {port}: EM USO")
                else:
                    print(f"      ‚úÖ Porta {port}: LIVRE")
                
                sock.close()
                
            except Exception as e:
                print(f"      ‚ö†Ô∏è Porta {port}: ERRO - {e}")
                
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro nas informa√ß√µes de rede: {e}")

def get_test_summary():
    """Resumo dos arquivos de teste gerados"""
    print("\nüìÅ ARQUIVOS DE TESTE GERADOS:")
    print("-" * 50)
    
    test_files = [
        "simplified_test_report.txt",
        "simplified_test_data.csv", 
        "simplified_ecosystem_test.log",
        "AEONCOSMA_VALIDATION_MILESTONE.md",
        "ecosystem_validation_test.py",
        "final_validation_test.py",
        "realtime_monitoring.py"
    ]
    
    for filename in test_files:
        if os.path.exists(filename):
            try:
                size = os.path.getsize(filename)
                mod_time = os.path.getmtime(filename)
                mod_date = datetime.fromtimestamp(mod_time).strftime('%d/%m/%Y %H:%M:%S')
                
                if size < 1024:
                    size_str = f"{size} bytes"
                elif size < 1024*1024:
                    size_str = f"{size/1024:.1f} KB"
                else:
                    size_str = f"{size/(1024*1024):.1f} MB"
                
                print(f"   ‚úÖ {filename} - {size_str} - {mod_date}")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è {filename} - Erro: {e}")
        else:
            print(f"   ‚ùå {filename} - N√£o encontrado")

def main():
    """Fun√ß√£o principal do monitor"""
    get_system_info()
    get_process_info()
    get_network_info()
    get_test_summary()
    
    print("\n" + "=" * 50)
    print("üéØ SISTEMA MONITORADO COM SUCESSO!")
    print("‚úÖ Recursos verificados ap√≥s teste AEONCOSMA")
    print("üìä Todas as informa√ß√µes coletadas")

if __name__ == "__main__":
    main()
